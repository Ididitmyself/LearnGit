How to use Git
第一章
Git简介：
Git是目前世界上最先进的分布式版本控制系统（没有之一）。

在Windows上安装Git完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

创建版本库：
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
pwd命令用于显示当前目录。

通过git init命令把这个目录初始化Git可以管理的仓库：
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/
查看.git目录，用ls -ah命令。

不要使用Windows自带的记事本编辑任何文本文件, 建议你下载Notepad++代替记事本。

添加文件到Git仓库，分两步：
第一步，使用命令git add <file>。例如：git add readme.txt
第二步，使用命令git commit，完成。例如：git commit -m “wrote a readme file”

第二章
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别。
版本回退：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。git reset --hard HEAD^，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数。

要重返未来，用git reflog查看命令历史，记录你的每一次命令，以便确定要回到未来的哪个版本。

读取文件内容：cat readme.txt

撤销修改：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

正常删除文件：rm test.txt
命令git rm用于删除一个文件，然后执行$ git commit -m "remove test.txt"。

第三章

远程仓创建SSH Key：
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C "youremail@example.com"

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改
用命令git clone克隆一个本地库：$ git clone git@github.com:michaelliao/gitskills.git

第四章

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
一般主分支命名为master，次分支命名为dev。

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。git status也可以告诉我们冲突的文件。
用git log --graph命令可以看到分支合并图。

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：$ git merge --no-ff -m "merge with no-ff" dev，因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
$ git stash，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。
$ git stash list查看刚才的工作现场存到哪去了。
恢复有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了。
强行删除分支：$ git branch -D feature-vulcan

多人协作：
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交，然后，在本地合并，解决冲突，再推送；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

标签处理：

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
$ git tag -a v0.1 -m "version 0.1 released" 3628164
用命令git show <tagname>可以看到说明文字
命令git tag可以查看所有标签。

命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

删除已有的GitHub远程库：git remote rm origin
关联码云的远程库（注意路径中需要填写正确的用户名）：
git remote add gitee git@gitee.com:xxxxx/xxxxx.git

第五章
自定义Git：
让Git显示颜色，会让命令输出看起来更醒目：$ git config --global color.ui true

文件忽略：
有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files...，有强迫症的童鞋心里肯定不爽。好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore